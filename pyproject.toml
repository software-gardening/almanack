[build-system]
build-backend = "poetry_dynamic_versioning.backend"

requires = [ "poetry-core>=1", "poetry-dynamic-versioning>=1,<2" ]

[tool.poetry]
name = "almanack"
version = "0.0.0"
description = "An open-source handbook of applied guidance and tools for sustainable software development and maintenance."
authors = [ "Software Gardening Community" ]
license = "BSD-3-Clause"
readme = "README.md"
packages = [ { include = "almanack", from = "src" } ]
include = [
  "src/book/*.yml",
  "src/book/**/*.md",
  "src/book/references.bib",
]
exclude = [ "src/book/_build" ]

[tool.poetry.dependencies]
python = ">=3.9,<=3.12"
pyyaml = "^6.0.1"
pygit2 = "^1.15.1"
fire = "^0.6.0"
tabulate = "^0.9.0"
charset-normalizer = "^3.4.0"

[tool.poetry.group.book.dependencies]
jupyter-book = "^1.0.0"
docutils = "0.20.1"
sphinxcontrib-bibtex = "^2.6.2"
pandas = "^2.2.2"
pyarrow = ">=16,<19"
jupyterlab = "^4.2.3"
plotly = "^5.22.0"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.25.0"
pytest = "^8.1.1"
linkchecker = "^10.4.0"
vale = "^3.3.1.0"
pyppeteer = "^2.0.0"
coverage = "^7.5.3"
biopython = "^1.84"
black = "^24.4.2"
isort = "^5.13.2"
jupyterlab-code-formatter = ">=2.2.1,<4.0.0"
requests = "^2.32.3"
kaleido = "0.2.1"
pygithub = "^2.3.0"
jupyterlab-spellchecker = "^0.8.4"
jsonschema = "^4.23.0"

[tool.poetry.scripts]
almanack = "almanack.reporting.cli:trigger"

[tool.poetry-dynamic-versioning]
enable = true
style = "pep440"
vcs = "git"

# specify where version replacement is performed
[tool.poetry-dynamic-versioning.substitution]
files = [ "src/almanack/__init__.py" ]

# set persistent versions within the __init__.py file in cases
# where we may not have or want access to full git history
[tool.poetry-dynamic-versioning.files."src/almanack/__init__.py"]
persistent-substitution = false

[tool.setuptools_scm]
root = "."

[tool.ruff]
target-version = "py311"
fix = true

lint.select = [
  # mccabe
  "C90",
  # pyflakes
  "F",
  # pylint
  "PL",
  # ruff
  "RUF",
]
# defines poe the poet tasks
# Ignore `E402` and `F401` (unused imports) in all `__init__.py` files
lint.per-file-ignores."__init__.py" = [ "F401" ]

[tool.isort]
profile = "black"

[tool.codespell]
ignore-words = "styles/config/vocabularies/almanack/accept.txt"
# add capabilities for inline ignore for codespell linting
# referenced from: https://github.com/codespell-project/codespell/issues/1212
ignore-regex = ".{1024}|.*codespell-ignore.*"

[tool.bandit]
exclude_dirs = [ "tests" ]

[tool.poe.tasks]
# builds the jupyter book related to this project
build-book.shell = """
  jupyter-book build src/book --all
"""
# build a PDF from the HTML content
# note: depends on build-book content and creates copy to avoid
# single-page changes performed on the HTML build.
build-book-pdf.shell = """
  cp -r src/book src/_pdfbuild &&
  jupyter-book build src/_pdfbuild --builder pdfhtml
"""
# builds the jupyter book related to this project and opens a new browser window
build-book-dev.shell = """
  jupyter-book build src/book && \
  python -m webbrowser -t "file://$PWD/src/book/_build/html/index.html"
"""
# syncs and runs vale relative to this project
# through pre-commit to trigger warnings as
# non-zero return when there is more than one
# line of output from vale.
vale-checks.shell = """
vale sync || true;
output=$(vale ./src/book) ||
if [ $(echo "$output" | wc -l) -gt 1 ]; then
echo "$output"; exit 1;
fi
"""
# add a convenience task for package-focused testing
pkg-tests.shell = """
pytest --ignore tests/test_build.py
"""
