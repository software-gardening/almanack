"""
###############################################################################
# Initially Auto-generated by `jupyter-book config`
# If you wish to continue using _config.yml, make edits to that file and
# re-generate this one.
###############################################################################
Originally followed guide at: https://jupyterbook.org/en/stable/sphinx/index.html
"""

from pathlib import Path
from typing import Any, List, Dict

import yaml
from jinja2 import Environment, FileSystemLoader
from sphinx.application import Sphinx

author = 'The Software Gardening Community'
bibtex_bibfiles = ['references.bib']
bibtex_reference_style = 'super'
comments_config = {'hypothesis': False, 'utterances': False}
copyright = '2023'
exclude_patterns = ['**.ipynb_checkpoints', '.DS_Store', 'Thumbs.db', '_build']
extensions = ['sphinx_togglebutton', 'sphinx_copybutton', 'myst_nb', 'jupyter_book', 'sphinx_thebe', 'sphinx_comments', 'sphinx_external_toc', 'sphinx.ext.intersphinx', 'sphinx_design', 'sphinx_book_theme', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'sphinx.ext.viewcode', 'sphinxcontrib.bibtex', 'sphinx_jupyterbook_latex', 'sphinx_multitoc_numbering']
external_toc_exclude_missing = False
external_toc_path = '_toc.yml'
html_baseurl = ''
html_css_files = ['custom.css']
html_favicon = 'favicon.png'
html_js_files = ['https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js']
html_logo = 'assets/software-gardening-logo.png'
html_sourcelink_suffix = ''
html_static_path = ['_static']
html_theme = 'sphinx_book_theme'
html_theme_options = {'search_bar_text': 'Search this book...', 'launch_buttons': {'notebook_interface': 'classic', 'binderhub_url': '', 'jupyterhub_url': '', 'thebe': False, 'colab_url': '', 'deepnote_url': ''}, 'path_to_docs': 'src/book', 'repository_url': 'https://github.com/software-gardening/almanack', 'repository_branch': 'main', 'extra_footer': '', 'home_page_in_toc': True, 'announcement': '', 'analytics': {'google_analytics_id': '', 'plausible_analytics_domain': '', 'plausible_analytics_url': 'https://plausible.io/js/script.js'}, 'use_repository_button': True, 'use_edit_page_button': False, 'use_issues_button': True}
html_title = 'The Software Gardening Almanack'
latex_engine = 'pdflatex'
myst_enable_extensions = ['colon_fence', 'dollarmath', 'linkify', 'substitution', 'tasklist']
myst_url_schemes = ['mailto', 'http', 'https']
nb_execution_allow_errors = False
nb_execution_cache_path = ''
nb_execution_excludepatterns = []
nb_execution_in_temp = False
nb_execution_mode = 'force'
nb_execution_timeout = 30
nb_output_stderr = 'show'
numfig = True
pygments_style = 'sphinx'
suppress_warnings = ['myst.domains']
use_jupyterbook_latex = True
use_multitoc_numbering = True

def generate_check_pages(app: Sphinx) -> None:
    """
    Generate Markdown pages for each linting 
    check defined in metrics.yml.

    Reads the checks catalog from YAML, 
    renders a Jinja2 template for each
    check, and writes the resulting `.md`
    files (plus an index) into
    the `checks/` folder under the
    docs source directory.

    Args:
        app (Sphinx):
            The Sphinx application object.
    """
    confdir = Path(app.confdir)
    srcdir = Path(app.srcdir)

    # point to your metrics.yml under ../almanack/metrics/
    yaml_path = confdir.parent / "almanack" / "metrics" / "metrics.yml"
    checks: List[Dict[str, Any]] = yaml.safe_load(
        yaml_path.read_text(encoding="utf-8")
    )

    # Set up Jinja environment
    template_dir = confdir / "_templates"
    env = Environment(
        loader=FileSystemLoader(str(template_dir)),
        keep_trailing_newline=True,
    )
    template = env.get_template("check_page.md.j2")

    # Ensure output directory exists
    output_dir = srcdir / "checks"
    output_dir.mkdir(parents=True, exist_ok=True)

    # Render each check into its own Markdown file
    for check in checks:
        rendered = template.render(check=check)
        file_path = output_dir / f"{check['id']}.md"
        file_path.write_text(rendered, encoding="utf-8")

    # Generate index.md listing all checks
    index_lines: List[str] = ["# Checks index", ""]
    for check in checks:
        index_lines.append(f"- [{check['name']}](./{check['id']}.md)")
    (output_dir / "index.md").write_text(
        "\n".join(index_lines), encoding="utf-8"
    )

def setup(app: Sphinx) -> None:
    """
    Hook into Sphinxâ€™s build lifecycle to
    generate check pages first.

    Args:
        app (Sphinx):
            The Sphinx application object.
    """
    app.connect("builder-inited", generate_check_pages)

